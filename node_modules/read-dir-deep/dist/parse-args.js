"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseArgs = parseArgs;
exports.defaultIgnorePatterns = void 0;

var _path = _interopRequireDefault(require("path"));

var _isPathCwd = _interopRequireDefault(require("is-path-cwd"));

var _isPathInCwd = _interopRequireDefault(require("is-path-in-cwd"));

var _slash = _interopRequireDefault(require("slash"));

var _validateArgs = require("./validate-args");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultIgnorePatterns = ['**/.DS_Store', '**/node_modules/**', '**/.git/**', '**/.vscode/**', '**/.idea/**', '**/dist/**', '**/build/**', '**/coverage/**'];
exports.defaultIgnorePatterns = defaultIgnorePatterns;
const defaultPatterns = ['**'];
const defaultOptions = {
  deep: Infinity,
  dot: true,
  markDirectories: true,
  gitignore: true,
  ignore: defaultIgnorePatterns
};

function isInsideProcessCwd(pathname) {
  const isCwd = (0, _isPathCwd.default)(pathname);

  if (isCwd === true) {
    return isCwd;
  }

  const insideCwd = (0, _isPathInCwd.default)(pathname);
  return insideCwd;
} // eslint-disable-next-line @typescript-eslint/explicit-function-return-type


function parseArgs(rootDir, options) {
  (0, _validateArgs.validateOptions)(rootDir, options); // eslint-disable-next-line prefer-const

  let {
    cwd,
    absolute,
    patterns = defaultPatterns,
    ...globbyOpts
  } = options;

  let parsedRootDir = _path.default.resolve(rootDir);

  const processCwd = _path.default.resolve(process.cwd());

  const rootDirIsInsideProcessCwd = isInsideProcessCwd(parsedRootDir); // default to absolute: true when rootDir is outside process.cwd()

  if (typeof absolute !== 'boolean') {
    absolute = rootDirIsInsideProcessCwd === false;
  }

  if (typeof cwd !== 'string') {
    // default to process.cwd when inside cwd
    cwd = rootDirIsInsideProcessCwd === true ? processCwd : parsedRootDir;
  }

  cwd = (0, _slash.default)(cwd);
  parsedRootDir = (0, _slash.default)(parsedRootDir);
  const globbyOptions = { ...defaultOptions,
    ...globbyOpts,
    cwd: parsedRootDir,
    absolute
  };
  return {
    absolute,
    rootDir,
    cwd,
    patterns,
    globbyOptions
  };
}
//# sourceMappingURL=parse-args.js.map