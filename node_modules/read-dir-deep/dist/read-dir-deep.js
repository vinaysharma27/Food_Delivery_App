"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readDirDeep = readDirDeep;
exports.readDirDeepSync = readDirDeepSync;
Object.defineProperty(exports, "defaultIgnorePatterns", {
  enumerable: true,
  get: function () {
    return _parseArgs.defaultIgnorePatterns;
  }
});

var _globby = _interopRequireWildcard(require("globby"));

var _parseArgs = require("./parse-args");

var _parseFiles = require("./parse-files");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

async function readDirDeep(rootDir, options = {}) {
  const {
    rootDir: rootDirParsed,
    absolute,
    cwd,
    patterns,
    globbyOptions
  } = (0, _parseArgs.parseArgs)(rootDir, options);
  const fileList = await (0, _globby.default)(patterns, globbyOptions);
  const result = (0, _parseFiles.parseFiles)({
    files: fileList,
    cwd,
    rootDir: rootDirParsed,
    absolute
  });
  return result;
}

function readDirDeepSync(rootDir, options = {}) {
  const {
    rootDir: rootDirParsed,
    absolute,
    cwd,
    patterns,
    globbyOptions
  } = (0, _parseArgs.parseArgs)(rootDir, options);
  const fileList = (0, _globby.sync)(patterns, globbyOptions);
  const result = (0, _parseFiles.parseFiles)({
    files: fileList,
    cwd,
    rootDir: rootDirParsed,
    absolute
  });
  return result;
}
//# sourceMappingURL=read-dir-deep.js.map