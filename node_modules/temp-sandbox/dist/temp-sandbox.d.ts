interface Options {
    randomDir?: boolean;
}
declare class TempSandbox {
    readonly dir: string;
    constructor(options?: Options);
    path: {
        resolve: (dir: string) => string;
        relative: (dir1: string, dir2?: string | undefined) => string;
    };
    createDir(dir: string): Promise<string>;
    createDirSync(dir: string): string;
    createFile(file: string, contents?: any): Promise<void>;
    createFileSync(file: string, contents?: any): void;
    delete(patterns: string | string[]): Promise<string[]>;
    deleteSync(patterns: string | string[]): string[];
    readFile(file: string): Promise<unknown>;
    readFileSync(file: string): unknown;
    getFileHash(file: string): Promise<string>;
    getFileHashSync(file: string): string;
    getFileList(dir?: string): Promise<string[]>;
    getFileListSync(dir?: string): string[];
    getAllFilesHash(dir?: string): Promise<{
        [key: string]: string;
    }>;
    getAllFilesHashSync(dir?: string): {
        [key: string]: string;
    };
    clean(): Promise<string[]>;
    cleanSync(): string[];
    destroySandbox(): Promise<string[]>;
    destroySandboxSync(): string[];
}
export { TempSandbox };
//# sourceMappingURL=temp-sandbox.d.ts.map